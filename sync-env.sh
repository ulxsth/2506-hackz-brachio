#!/bin/bash

# Environment variable sync script for TYPE 2 LIVE
# Usage: ./sync-env.sh [dev|staging|prod]

set -e

ENV=${1:-dev}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="$SCRIPT_DIR/terraform/environments/$ENV"
FRONTEND_DIR="$SCRIPT_DIR/frontend"

# 色付きログ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 引数チェック
if [[ ! "$ENV" =~ ^(dev|staging|prod)$ ]]; then
    log_error "Invalid environment. Use: dev, staging, or prod"
    exit 1
fi

# Terraformディレクトリの存在確認
if [ ! -d "$TERRAFORM_DIR" ]; then
    log_error "Terraform directory not found: $TERRAFORM_DIR"
    exit 1
fi

log_info "Syncing environment variables for: $ENV"

# Terraformディレクトリに移動
cd "$TERRAFORM_DIR"

# Terraformの状態確認
if [ ! -f "terraform-${ENV}.tfstate" ] && [ ! -f ".terraform/terraform.tfstate" ]; then
    log_warning "Terraform state not found. Run 'terraform init && terraform apply' first."
    exit 1
fi

# Terraformから値を取得
log_info "Extracting values from Terraform state..."

SUPABASE_URL=$(terraform output -raw supabase_url 2>/dev/null || echo "")
SUPABASE_ANON_KEY=$(terraform output -raw supabase_anon_key 2>/dev/null || echo "")
SUPABASE_SERVICE_KEY=$(terraform output -raw supabase_service_role_key 2>/dev/null || echo "")
SUPABASE_PROJECT_ID=$(terraform output -raw supabase_project_id 2>/dev/null || echo "")

# 値の存在確認
if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_ANON_KEY" ]; then
    log_error "Failed to extract Supabase credentials from Terraform state"
    exit 1
fi

# .env.localファイルを作成
ENV_FILE="$FRONTEND_DIR/.env.local"

log_info "Creating .env.local file..."

cat > "$ENV_FILE" << EOF
# Auto-generated by sync-env.sh for $ENV environment
# Generated on: $(date)

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=$SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_KEY

# Environment Configuration
NEXT_PUBLIC_APP_ENV=$ENV
NODE_ENV=$([ "$ENV" = "prod" ] && echo "production" || echo "development")

# Development specific settings
$([ "$ENV" = "dev" ] && cat << DEV_EOF
DEBUG=true
LOG_LEVEL=debug
NEXT_PUBLIC_ENABLE_MOCK_DATA=true
DEV_EOF
)

# Additional settings for non-dev environments
$([ "$ENV" != "dev" ] && cat << PROD_EOF
NEXT_PUBLIC_ENABLE_ANALYTICS=true
PROD_EOF
)
EOF

log_success "Environment file created: $ENV_FILE"

# Supabase CLI linking (開発環境のみ)
if [ "$ENV" = "dev" ] && [ -n "$SUPABASE_PROJECT_ID" ]; then
    log_info "Setting up Supabase CLI linking..."
    
    cd "$FRONTEND_DIR"
    
    # supabase/config.tomlが存在しない場合は初期化
    if [ ! -f "supabase/config.toml" ]; then
        log_info "Initializing Supabase project..."
        supabase init 2>/dev/null || log_warning "Supabase init failed or already initialized"
    fi
    
    # プロジェクトリンク
    log_info "Linking to Supabase project: $SUPABASE_PROJECT_ID"
    supabase link --project-ref "$SUPABASE_PROJECT_ID" 2>/dev/null || log_warning "Supabase link failed or already linked"
    
    cd "$SCRIPT_DIR"
fi

# 完了メッセージ
log_success "Environment sync completed!"
echo ""
log_info "Next steps:"
echo "  1. cd frontend"
echo "  2. npm run dev"
echo ""

if [ "$ENV" = "dev" ]; then
    log_info "Development environment specific commands:"
    echo "  • supabase start    (Start local Supabase)"
    echo "  • supabase status   (Check Supabase status)"
    echo "  • supabase studio   (Open Supabase Studio)"
fi

log_info "Environment variables have been written to: $ENV_FILE"
