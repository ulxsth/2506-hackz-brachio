"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeminiClient = void 0;
const generative_ai_1 = require("@google/generative-ai");
class GeminiClient {
    genAI;
    model;
    rateLimitDelay;
    maxRetries;
    constructor(apiKey, rateLimitDelay = 1000, maxRetries = 3) {
        this.genAI = new generative_ai_1.GoogleGenerativeAI(apiKey);
        this.model = this.genAI.getGenerativeModel({
            model: "gemini-1.5-flash-8b",
            generationConfig: {
                temperature: 0.3,
                topK: 20,
                topP: 0.8,
                maxOutputTokens: 50,
            }
        });
        this.rateLimitDelay = rateLimitDelay;
        this.maxRetries = maxRetries;
    }
    async translateToJapanese(languageName, englishSummary) {
        const prompt = this.buildPrompt(languageName, englishSummary);
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                console.log(`üîÑ ${languageName} „ÇíÁøªË®≥‰∏≠... (Ë©¶Ë°å ${attempt}/${this.maxRetries})`);
                const result = await this.model.generateContent(prompt);
                const response = await result.response;
                const text = response.text();
                const cleanedText = this.cleanResponse(text);
                const validatedText = this.validateResponse(cleanedText);
                console.log(`‚úÖ ${languageName}: "${validatedText}"`);
                if (attempt < this.maxRetries) {
                    await this.sleep(this.rateLimitDelay);
                }
                return validatedText;
            }
            catch (error) {
                console.warn(`‚ö†Ô∏è  ${languageName} „ÅÆÁøªË®≥„Å´Â§±Êïó (Ë©¶Ë°å ${attempt}/${this.maxRetries}):`, error);
                if (attempt === this.maxRetries) {
                    throw new Error(`ÁøªË®≥Â§±Êïó: ${error instanceof Error ? error.message : String(error)}`);
                }
                const backoffDelay = this.rateLimitDelay * Math.pow(2, attempt - 1);
                await this.sleep(backoffDelay);
            }
        }
        throw new Error('ÊúÄÂ§ßË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„Åæ„Åó„Åü');
    }
    async translateBatch(languages) {
        const results = [];
        for (const language of languages) {
            try {
                const japaneseSummary = await this.translateToJapanese(language.name, language.summary);
                results.push({
                    name: language.name,
                    japaneseSummary
                });
            }
            catch (error) {
                console.error(`‚ùå ${language.name} „ÅÆ„Éê„ÉÉ„ÉÅÁøªË®≥„Å´Â§±Êïó:`, error);
                results.push({
                    name: language.name,
                    japaneseSummary: 'ÁøªË®≥„Ç®„É©„Éº',
                    error: error instanceof Error ? error.message : String(error)
                });
            }
            await this.sleep(this.rateLimitDelay);
        }
        return results;
    }
    buildPrompt(languageName, englishSummary) {
        return `‰ª•‰∏ã„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÅÆËã±Ë™ûË™¨ÊòéÊñá„Çí„ÄÅÊ≠£Á¢∫„ÅßÁ∞°ÊΩî„Å™Êó•Êú¨Ë™û„Å´ÁøªË®≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™ûÂêç: "${languageName}"

Ëã±Ë™ûË™¨ÊòéÊñá:
"${englishSummary}"

ÁøªË®≥Ë¶Å‰ª∂:
- 30ÊñáÂ≠ó‰ª•ÂÜÖ„ÅÆÁ∞°ÊΩî„Å™Êó•Êú¨Ë™û
- „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÅÆÁâπÂæ¥„ÇíÊ≠£Á¢∫„Å´Ë°®Áèæ
- ÊäÄË°ìÁöÑ„Å´Ê≠£Á¢∫„Å™Áî®Ë™û„Çí‰ΩøÁî®
- Ë™≠„Åø„ÇÑ„Åô„ÅèËá™ÁÑ∂„Å™Êó•Êú¨Ë™û

ÂõûÁ≠îÂΩ¢Âºè:
[ÁøªË®≥ÁµêÊûú„ÅÆ„Åø„ÇíÂá∫Âäõ„ÄÇË™¨Êòé„ÇÑË£úË∂≥„ÅØ‰∏çË¶Å]

‰æã:
- "Python" ‚Üí "Ê±éÁî®„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÄÇAIÂàÜÈáé„Åß‰∫∫Ê∞ó„ÄÇ"
- "JavaScript" ‚Üí "Web„Éö„Éº„Ç∏„Å´ÂãïÁöÑÊ©üËÉΩ„ÇíËøΩÂä†„Åô„ÇãË®ÄË™û„ÄÇ"

ÁøªË®≥ÁµêÊûú:`;
    }
    cleanResponse(text) {
        return text
            .trim()
            .replace(/^["'`]|["'`]$/g, '')
            .replace(/\n+/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }
    validateResponse(text) {
        if (text.length > 30) {
            console.warn(`‚ö†Ô∏è  ÊñáÂ≠óÊï∞Ë∂ÖÈÅé (${text.length}ÊñáÂ≠ó): "${text}"`);
            text = text.substring(0, 29) + '„ÄÇ';
        }
        if (text.length < 5) {
            throw new Error('ÁøªË®≥ÁµêÊûú„ÅåÁü≠„Åô„Åé„Åæ„Åô');
        }
        const invalidPatterns = [
            /ÁøªË®≥„Åß„Åç„Åæ„Åõ„Çì/i,
            /error/i,
            /Áî≥„ÅóË®≥/i,
            /„Åô„Åø„Åæ„Åõ„Çì/i
        ];
        for (const pattern of invalidPatterns) {
            if (pattern.test(text)) {
                throw new Error('‰∏çÈÅ©Âàá„Å™ÁøªË®≥ÁµêÊûú');
            }
        }
        return text;
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    calculateEstimatedCost(requestCount) {
        const inputCostPerMTokens = 0.0375;
        const outputCostPerMTokens = 0.15;
        const averageInputTokens = 80;
        const averageOutputTokens = 15;
        const totalInputTokens = requestCount * averageInputTokens;
        const totalOutputTokens = requestCount * averageOutputTokens;
        const inputCost = (totalInputTokens / 1_000_000) * inputCostPerMTokens;
        const outputCost = (totalOutputTokens / 1_000_000) * outputCostPerMTokens;
        return inputCost + outputCost;
    }
}
exports.GeminiClient = GeminiClient;
//# sourceMappingURL=gemini-client.js.map